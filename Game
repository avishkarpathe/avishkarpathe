#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Constants for the game
const int GRID_SIZE = 3;
const char X_MARK = 'X';
const char O_MARK = 'O';

// Struct to hold player information
struct Player {
    string name;
    int wins;
    int losses;
    int longestWinStreak;
    int currentWinStreak;
};

// Struct to hold game state
struct Game {
    char grid[GRID_SIZE * GRID_SIZE];
    bool isGameOver;
    char currentPlayerMark;
    int turnNumber;
};

// Function to initialize the game state
void initializeGame(Game& game) {
    for (int i = 0; i < GRID_SIZE * GRID_SIZE; i++) {
        game.grid[i] = ' ';
    }
    game.isGameOver = false;
    game.currentPlayerMark = X_MARK;
    game.turnNumber = 0;
}

// Function to display the game grid
void displayGrid(const Game& game) {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            cout << game.grid[i * GRID_SIZE + j];
            if (j < GRID_SIZE - 1) {
                cout << " | ";
            }
        }
        cout << endl;
        if (i < GRID_SIZE - 1) {
            cout << "---------" << endl;
        }
    }
}

// Function to check if the current player has won
bool hasPlayerWon(const Game& game) {
    // Check rows
    for (int i = 0; i < GRID_SIZE; i++) {
        if (game.grid[i * GRID_SIZE] == game.grid[i * GRID_SIZE + 1] &&
            game.grid[i * GRID_SIZE] == game.grid[i * GRID_SIZE + 2] &&
            game.grid[i * GRID_SIZE] != ' ') {
            return true;
        }
    }

    // Check columns
    for (int i = 0; i < GRID_SIZE; i++) {
        if (game.grid[i] == game.grid[i + GRID_SIZE] &&
            game.grid[i] == game.grid[i + 2 * GRID_SIZE] &&
            game.grid[i] != ' ') {
            return true;
        }
    }

    // Check diagonals
    if ((game.grid[0] == game.grid[GRID_SIZE + 1] &&
         game.grid[0] == game.grid[2 * GRID_SIZE + 2] &&
         game.grid[0] != ' ') ||
        (game.grid[GRID_SIZE - 1] == game.grid[GRID_SIZE * 2 - 2] &&
         game.grid[GRID_SIZE - 1] == game.grid[GRID_SIZE * 2 + 1] &&
         game.grid[GRID_SIZE - 1] != ' ')) {
        return true;
    }

    return false;
}

// Function to play the game
void playGame(Player& player1, Player& player2) {
    Game game;
    initializeGame(game);

    while (!game.isGameOver) {
        displayGrid(game);
        cout << "Enter move (1-" << GRID_SIZE * GRID_SIZE << "): ";
        int move;
        cin >> move;
        move--; // Convert to 0-based index

        if (move < 0 || move >= GRID_SIZE * GRID_SIZE || game.grid[move] != ' ') {
            cout << "Invalid move, try again." << endl;
            continue;
        }

        game.grid[move] = game.currentPlayerMark;
        game.turnNumber++;

        if (hasPlayerWon(game)) {
            displayGrid(game);
            cout << "Player " << (game.currentPlayerMark == X_MARK ? player1.name : player2.name) << " wins!" << endl;

            if (game.currentPlayerMark == X_MARK) {
                player1.wins++;
                player2.losses++;
                player1.currentWinStreak++;
                player2.currentWinStreak = 0;

                if (player1.currentWinStreak > player1.longestWinStreak) {
                    player1.longestWinStreak = player1.currentWinStreak;
                }
            } else {
                player2.wins++;
                player1.losses++;
                player2.currentWinStreak++;
                player1.currentWinStreak = 0;

                if (player2.currentWinStreak > player2.longestWinStreak) {
                    player2.longestWinStreak = player2.currentWinStreak;
                }
            }

            game.isGameOver = true;
        } else if (game.turnNumber == GRID_SIZE * GRID_SIZE) {
            displayGrid(game);
            cout << "It's a draw!" << endl;
            game.isGameOver
